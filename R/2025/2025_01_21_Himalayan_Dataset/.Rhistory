# Load required packages
if(!require("pacman")) install.packages(("pacman"))
peaks_tidy <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-21/peaks_tidy.csv')
# Load dataset
exped_tidy <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-21/exped_tidy.csv')
peaks_tidy <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-21/peaks_tidy.csv')
# Load required packages
if(!require("pacman")) install.packages(("pacman"))
pacman::p_load(tidyverse, tidytext, ggwordcloud, here)
write.csv(exped_tidy, "data/exped_tidy.csv")
write.csv(peaks_tidy, "data/peaks_tidy.csv")
sum(is.na(peaks_tidy))
sapply(peaks_tidy,function x: sum(is.na(x)) )
sapply(peaks_tidy,function(x): sum(is.na(x)))
sapply(peaks_tidy,function(x) sum(is.na(x)))
View(exped_tidy)
View(peaks_tidy)
# Load necessary libraries
library(dplyr)
library(ggplot2)
himalayan_data <- exped_tidy
# Data preparation
# Assuming your data frame is called `himalayan_data`
himalayan_data <- himalayan_data %>%
mutate(
total_success = SUCCESS1 + SUCCESS2 + SUCCESS3 + SUCCESS4,  # Total successful summits
success_rate = total_success / SMTMEMBERS * 100            # Success rate in percentage
) %>%
filter(!is.na(O2USED) & SMTMEMBERS > 0)  # Filter valid rows
# Create the boxplot
ggplot(himalayan_data, aes(x = O2USED, y = success_rate, fill = O2USED)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
scale_fill_manual(values = c("O2USED" = "#1f78b4", "O2NONE" = "#33a02c")) +
labs(
title = "Summit Success Rates by Oxygen Usage",
x = "Oxygen Usage",
y = "Summit Success Rate (%)",
fill = "Oxygen Used"
) +
theme_minimal()
# Load necessary libraries
library(ggalluvial)
# Data preparation for Sankey diagram
sankey_data <- himalayan_data %>%
mutate(
outcome = case_when(
total_success == SMTMEMBERS ~ "Success",
total_success > 0 ~ "Partial Success",
total_success == 0 ~ "Failure"
)
) %>%
group_by(O2USED, outcome) %>%
summarize(count = n(), .groups = "drop")
# Create the Sankey diagram
ggplot(sankey_data, aes(
axis1 = O2USED, axis2 = outcome, y = count,
fill = O2USED
)) +
geom_alluvium(aes(fill = O2USED), width = 0.3) +
geom_stratum(width = 0.5, fill = "grey", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("O2USED" = "#1f78b4", "O2NONE" = "#33a02c")) +
labs(
title = "Flow of Oxygen Usage to Summit Outcomes",
x = "Oxygen Usage and Summit Outcomes",
y = "Number of Expeditions",
fill = "Oxygen Used"
) +
theme_minimal()
# Load necessary libraries
library(ggalluvial)
# Data preparation for Sankey diagram
sankey_data <- himalayan_data %>%
mutate(
outcome = case_when(
total_success == SMTMEMBERS ~ "Success",
total_success > 0 ~ "Partial Success",
total_success == 0 ~ "Failure"
)
) %>%
group_by(O2USED, outcome) %>%
summarize(count = n(), .groups = "drop")
# Create the Sankey diagram
ggplot(sankey_data, aes(
axis1 = O2USED, axis2 = outcome, y = count,
fill = O2USED
)) +
geom_alluvium(aes(fill = O2USED), width = 0.3) +
geom_stratum(width = 0.5, fill = "grey", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
# scale_fill_manual(values = c("O2USED" = "#1f78b4", "O2NONE" = "#33a02c")) +
labs(
title = "Flow of Oxygen Usage to Summit Outcomes",
x = "Oxygen Usage and Summit Outcomes",
y = "Number of Expeditions",
fill = "Oxygen Used"
) +
theme_minimal()
# Load necessary libraries
library(ggalluvial)
# Data preparation for Sankey diagram
sankey_data <- himalayan_data %>%
mutate(
outcome = case_when(
total_success == SMTMEMBERS ~ "Success",
total_success > 0 ~ "Partial Success",
total_success == 0 ~ "Failure"
)
) %>%
group_by(O2USED, outcome) %>%
summarize(count = n(), .groups = "drop")
# Create the Sankey diagram
ggplot(sankey_data, aes(
axis1 = O2USED, axis2 = outcome, y = count,
fill = O2USED
)) +
geom_alluvium(aes(fill = O2USED), width = 0.3) +
geom_stratum(width = 0.5, fill = "grey", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("O2USED" = "#1f78b4", "O2NONE" = "#33a02c")) +
labs(
title = "Flow of Oxygen Usage to Summit Outcomes",
x = "Oxygen Usage and Summit Outcomes",
y = "Number of Expeditions",
fill = "Oxygen Used"
) +
theme_minimal()
# Correct scale_fill_manual to match actual values in the O2USED column
ggplot(sankey_data, aes(
axis1 = O2USED, axis2 = outcome, y = count,
fill = O2USED
)) +
geom_alluvium(aes(fill = O2USED), width = 0.3) +
geom_stratum(width = 0.5, fill = "grey", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(
values = c("TRUE" = "#1f78b4", "FALSE" = "#33a02c"),  # Adjust based on your actual values
labels = c("Oxygen Used", "No Oxygen")
) +
labs(
title = "Flow of Oxygen Usage to Summit Outcomes",
x = "Oxygen Usage and Summit Outcomes",
y = "Number of Expeditions",
fill = "Oxygen Used"
) +
theme_minimal()
ggplot(sankey_data, aes(
axis1 = O2USED, axis2 = outcome, y = count
)) +
geom_alluvium(aes(fill = O2USED), width = 0.3) +
geom_stratum(width = 0.5, fill = "grey", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(
values = c(
"TRUE" = "#1f78b4",  # Replace with exact values from `unique(sankey_data$O2USED)`
"FALSE" = "#33a02c"
),
labels = c("Oxygen Used", "No Oxygen")
) +
labs(
title = "Flow of Oxygen Usage to Summit Outcomes",
x = "Oxygen Usage and Summit Outcomes",
y = "Number of Expeditions",
fill = "Oxygen Used"
) +
theme_minimal()
# Load required libraries
library(ggplot2)
library(dplyr)
# Create a new dataset with the success rate calculation
mountaineering_data <- mountaineering_data %>%
mutate(
success_rate = SMTMEMBERS / TOTMEMBERS * 100,   # Calculate success rate
oxygen_usage = ifelse(O2USED, "Used Oxygen", "No Oxygen")  # Label for oxygen use
) %>%
filter(!is.na(success_rate) & TOTMEMBERS > 0)  # Filter valid rows
# Load required libraries
library(ggplot2)
library(dplyr)
mountaineering_data <- exped_tidy
# Create a new dataset with the success rate calculation
mountaineering_data <- mountaineering_data %>%
mutate(
success_rate = SMTMEMBERS / TOTMEMBERS * 100,   # Calculate success rate
oxygen_usage = ifelse(O2USED, "Used Oxygen", "No Oxygen")  # Label for oxygen use
) %>%
filter(!is.na(success_rate) & TOTMEMBERS > 0)  # Filter valid rows
# Create the boxplot
ggplot(mountaineering_data, aes(x = oxygen_usage, y = success_rate, fill = oxygen_usage)) +
geom_boxplot(outlier.shape = 21, outlier.color = "black", outlier.size = 2, alpha = 0.7) +
scale_fill_manual(values = c("Used Oxygen" = "#1f78b4", "No Oxygen" = "#33a02c")) +
labs(
title = "Impact of Supplemental Oxygen on Summit Success Rates",
x = "Oxygen Usage",
y = "Success Rate (%)",
fill = "Oxygen Usage"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")
)
# Load required libraries
library(dplyr)
library(ggalluvial)
library(ggplot2)
# Prepare the data for the Sankey diagram
sankey_data <- mountaineering_data %>%
mutate(
oxygen_usage = ifelse(O2USED, "Used Oxygen", "No Oxygen"),  # Label for oxygen usage
success_status = ifelse(SMTMEMBERS > 0, "Success", "Failure")  # Label success or failure
) %>%
group_by(oxygen_usage, success_status) %>%
summarise(count = n(), .groups = "drop")  # Count combinations
# Create the Sankey diagram
ggplot(sankey_data,
aes(axis1 = oxygen_usage, axis2 = success_status, y = count)) +
geom_alluvium(aes(fill = oxygen_usage), width = 1/12) +
geom_stratum(width = 1/6, fill = "gray70", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("Used Oxygen" = "#1f78b4", "No Oxygen" = "#33a02c")) +
labs(
title = "Sankey Diagram: Flow of Oxygen Usage to Summit Outcomes",
x = "",
y = "Expedition Count"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.y = element_blank(),
axis.title.y = element_text(face = "bold"),
panel.grid = element_blank()
)
# Load required packages
if(!require("pacman")) install.packages(("pacman"))
pacman::p_load(tidyverse, tidytext, here, ggstatsplot)
plt <- ggbetweenstats(
data = mountaineering_data,
x = oxygen_usage,
y = success_rate
)
library(ggstatsplot)
install.packages("glue")
library(ggstatsplot)
